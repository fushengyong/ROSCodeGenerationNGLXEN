<#@ template debug="true" hostspecific="true"#>
<#@ output extension="txt" #>
 
<#@ assembly name="netstandard" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>
﻿<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="VSLangProj" #>
<#@ assembly name="$(TargetPath)" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating.VSHost" #>
<#@ import namespace="Rosbridge.CodeGeneration.Logic.Helpers" #>
<#@ import namespace="Rosbridge.CodeGeneration.Logic.BaseClasses" #>
<#@ import namespace="Rosbridge.CodeGeneration.Logic.Interfaces" #>
<#@ import namespace="Rosbridge.CodeGeneration.Logic.Constants" #>

<# 
    IServiceProvider serviceProvider = (IServiceProvider)this.Host;

    string configFilePath = ConfigFinder.GetConfigFilePath(serviceProvider, this.Host.TemplateFile);
    
    ExeConfigurationFileMap configFile = new ExeConfigurationFileMap();
    configFile.ExeConfigFilename = configFilePath;

    KeyValueConfigurationCollection appSettings = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFile, ConfigurationUserLevel.None).AppSettings.Settings;

    string rosMessagesDirectoryPath = appSettings["RosMessagesDirectoryPath"].Value;
    string rosMessagesProjectName = appSettings["RosMessagesProjectName"].Value;
    string rosMessagesProjectTemplateFrameworkVersion = appSettings["RosMessagesProjectTemplateFrameworkVersion"].Value;
    string rosMessageTypeAttributeProjectName = appSettings["RosMessageTypeAttributeProjectName"].Value;
    string rosMessageTypeAttributeNamespace = appSettings["RosMessageTypeAttributeNamespace"].Value;
    string rosMessageTypeAttributeName = appSettings["RosMessageTypeAttributeName"].Value;

    IYAMLParser yamlParser = new YAMLParser(RosConstants.MessageTypes.PrimitiveTypeDictionary);
    ROSFileLoader fileLoader = new ROSFileLoader(yamlParser);

    ISet<IMsgFile> messageFileSet = new HashSet<IMsgFile>();
    ISet<ISrvFile> serviceFileSet = new HashSet<ISrvFile>();

    fileLoader.LoadRosFiles(messageFileSet, serviceFileSet, rosMessagesDirectoryPath);

    ITextTemplating textTemplating = serviceProvider.GetService(typeof(STextTemplating)) as ITextTemplating;
    ITextTemplatingSessionHost textTemplatingSessionHost = textTemplating as ITextTemplatingSessionHost;
    ISolutionManager solutionManager = new SolutionManager(serviceProvider, rosMessagesProjectName, rosMessageTypeAttributeProjectName, rosMessagesProjectTemplateFrameworkVersion);

    CodeGenerator generator = new CodeGenerator(this.Host, textTemplatingSessionHost, textTemplating, solutionManager, rosMessagesProjectName, rosMessageTypeAttributeName, rosMessageTypeAttributeNamespace);

    generator.GenerateRosMessages(messageFileSet, MsgFile.StandardNamespace);
 #>