﻿<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="Type" #>
<#
    if(string.IsNullOrWhiteSpace(Namespace)){
        throw new ArgumentException("The argument cannot be empty!", nameof(Namespace));
    }

    if(string.IsNullOrWhiteSpace(Type)){
        throw new ArgumentException("The argument cannot be empty!", nameof(Type));
    }
#>
namespace <#= Namespace #>{
    public struct <#= Type #>{
        public uint sec { get; set; }
        public uint nsec { get; set; }

        public override bool Equals(object obj){
            if(!(obj is <#= Type #>))
            {
                return false;
            }
            
            <#= Type #> other = (<#= Type #>) obj;           

            return (this.sec == other.sec && this.nsec == other.nsec);
        }

        public static bool operator ==(<#= Type #> obj1, <#= Type #> obj2) {
            if (object.ReferenceEquals(null, obj1)){
                return object.ReferenceEquals(null, obj2);
            }
            return obj1.Equals(obj2);
        }

        public static bool operator !=(<#= Type #> obj1, <#= Type #> obj2) {
            if (object.ReferenceEquals(null, obj1)){
                return !object.ReferenceEquals(null, obj2);
            }
            return !obj1.Equals(obj2);
        }  
    }
}