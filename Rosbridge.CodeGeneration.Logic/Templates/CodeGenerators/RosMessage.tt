﻿<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="MessageTypeAttributeName" #>
<#@ parameter type="System.String" name="MessageTypeAttributeNamespace" #>
<#@ parameter type="System.String" name="NamespacePrefix" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<String>" name="DependencyList" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="Type" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<Tuple<string, string, string>>" name="ConstantFieldList" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<Tuple<string, string, int>>" name="ArrayFieldList" #>
<#@ parameter type="System.Collections.Generic.IDictionary<string, string>" name="FieldList" #>
<#
    if(null == MessageTypeAttributeName){
        throw new ArgumentNullException(nameof(MessageTypeAttributeName));
    }

    if(string.Empty == MessageTypeAttributeName){
        throw new ArgumentException("Parameter cannot be empty!", nameof(MessageTypeAttributeName));
    }
    
    if(null == MessageTypeAttributeNamespace){
        throw new ArgumentNullException(nameof(MessageTypeAttributeNamespace));
    }

    if(string.Empty == MessageTypeAttributeNamespace){
        throw new ArgumentException("Parameter cannot be empty!", nameof(MessageTypeAttributeNamespace));
    }

    if(null == NamespacePrefix){
        throw new ArgumentNullException(nameof(NamespacePrefix));
    }

    if(string.Empty == NamespacePrefix){
        throw new ArgumentException("Parameter cannot be empty!", nameof(NamespacePrefix));
    }

    if(null == DependencyList){
        throw new ArgumentNullException(nameof(DependencyList));
    }

    if(null == Namespace){
        throw new ArgumentNullException(nameof(Namespace));
    }

    if(string.Empty == Namespace){
        throw new ArgumentException("Parameter cannot be empty!", nameof(Namespace));
    }

    if(null == Type){
        throw new ArgumentNullException(nameof(Type));
    }

    if(string.Empty == Type){
        throw new ArgumentException("Parameter cannot be empty!", nameof(Type));
    }

    if(null == ConstantFieldList){
        throw new ArgumentNullException(nameof(ConstantFieldList));
    }

    if(null == ArrayFieldList){
        throw new ArgumentNullException(nameof(ArrayFieldList));
    }

    if(null == FieldList){
        throw new ArgumentNullException(nameof(FieldList));
    }
#>
namespace <#= AddPrefixToNamespace(Namespace) #> {
    using System;
    using <#= MessageTypeAttributeNamespace #>;
<# foreach(string dependencyNamespace in DependencyList){ #>
    using <#= AddPrefixToNamespace(dependencyNamespace) #>;     
<# }#>
    [<#= MessageTypeAttributeName #>("<#= Namespace #>/<#= Type #>")]
    public class <#= Type #> { 
<# foreach(Tuple<string, string, string> constantField in ConstantFieldList){ #>
        public const <#= constantField.Item1 #> <#= constantField.Item2 #> = <# if(constantField.Item1 == "char"){ #>'<#= constantField.Item3 #>'<# }else if(constantField.Item1 == "string"){ #>"<#= constantField.Item3 #>"<# } else { #><#= constantField.Item3 #><# } #>;
<# } foreach(Tuple<string, string, int> arrayField in ArrayFieldList){ #>
        public <#= arrayField.Item1 #>[] <#= arrayField.Item2 #> { get; set; }
<# } foreach(KeyValuePair<string, string> field in FieldList){ #>
        public <#= field.Value #> <#= field.Key #> { get; set; }
<# } #>

        public <#= Type #>(){
<# foreach(Tuple<string, string, int> arrayField in ArrayFieldList){ #>
<# if(arrayField.Item3 > 0){ #>
            this.<#= arrayField.Item2 #> = new <#= arrayField.Item1 #>[<#= arrayField.Item3 #>];
<# } #>
<# } #>
        }
    }
}
<#+
    private string AddPrefixToNamespace(string namespaceName){
        if(!string.IsNullOrEmpty(NamespacePrefix)){
            return string.Format("{0}.{1}", NamespacePrefix,namespaceName);
        }
        return namespaceName;
    }
 #>