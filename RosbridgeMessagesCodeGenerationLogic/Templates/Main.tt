<#@ template debug="true" hostspecific="true"#>
<#@ output extension="txt" #>
 
﻿<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Configuration" #>

<#@ assembly name="$(SolutionDir)\RosbridgeMessagesCodeGenerationLogic\bin\Debug\RosbridgeMessagesCodeGenerationLogic.dll" #>

<#@ import namespace="RosbridgeMessagesCodeGenerationLogic.Enums" #>
<#@ import namespace="RosbridgeMessagesCodeGenerationLogic.Helpers" #>
<#@ import namespace="RosbridgeMessagesCodeGenerationLogic.BaseClasses" #>
<#@ import namespace="RosbridgeMessagesCodeGenerationLogic.Interfaces" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Configuration" #> 
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating.VSHost" #>

<# 
    IServiceProvider serviceProvider = (IServiceProvider)this.Host;

    KeyValueConfigurationCollection appSettings = ConfigFinder.GetConfigFile(serviceProvider, this.Host.TemplateFile).AppSettings.Settings;
    string rosMessagesDirectoryPath = appSettings["RosMessagesDirectoryPath"].Value;
    string rosMessagesProjectName = appSettings["RosMessagesProjectName"].Value;
    string rosMessageTypeAttributeProjectName = appSettings["rosMessageTypeAttributeProjectName"].Value;
    string rosMessageTypeAttributeName = appSettings["RosMessageTypeAttributeName"].Value;
    string rosMessageTypeAttributeNamespace = appSettings["RosMessageTypeAttributeNamespace"].Value;

    IYAMLParser yamlParser = new YAMLParser(MsgFile.PrimitiveTypeDictionary);
    FileLoader fileLoader = new FileLoader(yamlParser);

    ISet<MsgFile> msgFileSet = new HashSet<MsgFile>();
    ISet<SrvFile> srvFileSet = new HashSet<SrvFile>();

    fileLoader.LoadRosFiles(msgFileSet, srvFileSet, rosMessagesDirectoryPath);

    ITextTemplating textTemplating = serviceProvider.GetService(typeof(STextTemplating)) as ITextTemplating;
    ITextTemplatingSessionHost textTemplatingSessionHost = textTemplating as ITextTemplatingSessionHost;
    ISolutionManager solutionManager = new SolutionManager(serviceProvider, rosMessagesProjectName, rosMessageTypeAttributeProjectName);

    CodeGenerator generator = new CodeGenerator(this.Host, textTemplatingSessionHost, textTemplating, solutionManager, rosMessagesProjectName, rosMessageTypeAttributeName, rosMessageTypeAttributeNamespace);

    generator.GenerateRosMessages(msgFileSet);
 #>