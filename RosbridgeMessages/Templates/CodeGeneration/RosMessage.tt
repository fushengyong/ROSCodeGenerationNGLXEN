﻿<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
﻿<#@ assembly name="Microsoft.CSharp" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="MessageTypeAttributeName" #>
<#@ parameter type="System.String" name="MessageTypeAttributeNamespace" #>
<#@ parameter type="System.String" name="NamespacePrefix" #>
<#@ parameter type="System.Collections.Generic.List<String>" name="DependencyList" #>
<#@ parameter type="System.String" name="MessageNamespace" #>
<#@ parameter type="System.String" name="MessageType" #>
<#@ parameter type="System.Collections.Generic.List<Tuple<string, string, string>>" name="ConstantFieldList" #>
<#@ parameter type="System.Collections.Generic.List<Tuple<string, string, int>>" name="ArrayFieldList" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string, string>" name="FieldList" #>
<#
    if(null == MessageTypeAttributeName){
        throw new ArgumentNullException(nameof(MessageTypeAttributeName));
    }
    
    if(null == MessageTypeAttributeNamespace){
        throw new ArgumentNullException(nameof(MessageTypeAttributeNamespace));
    }

    if(null == NamespacePrefix){
        throw new ArgumentNullException(nameof(NamespacePrefix));
    }

    if(null == DependencyList){
        throw new ArgumentNullException(nameof(DependencyList));
    }

    if(null == MessageNamespace){
        throw new ArgumentNullException(nameof(MessageNamespace));
    }

    if(null == MessageType){
        throw new ArgumentNullException(nameof(MessageType));
    }

    if(null == ConstantFieldList){
        throw new ArgumentNullException(nameof(ConstantFieldList));
    }

    if(null == ArrayFieldList){
        throw new ArgumentNullException(nameof(ArrayFieldList));
    }

    if(null == FieldList){
        throw new ArgumentNullException(nameof(FieldList));
    }
#>
namespace <#= AddPrefixToNamespace(MessageNamespace) #> {
    using <#= MessageTypeAttributeNamespace #>
<# foreach(string dependencyNamespace in DependencyList){ #>
    using <#= AddPrefixToNamespace(dependencyNamespace) #>;     
<# }#>
    [<#= MessageTypeAttributeName #>("<#= MessageNamespace #>/<#= MessageType #>")]
    public class <#= MessageType #> { 
        <# 
        foreach(Tuple<string, string, string> constantField in ConstantFieldList){ #>
    public const <#= constantField.Item1 #> <#= constantField.Item2 #> = <#= constantField.Item3 #>;
        <#}
        foreach(Tuple<string, string, int> arrayField in ArrayFieldList){ #>
    public <#= arrayField.Item1 #> [<#= arrayField.Item3 > 0 ? arrayField.Item3.ToString() : string.Empty #>] <#= arrayField.Item2 #> { get; set; }
        <#}
        foreach(KeyValuePair<string, string> field in FieldList){ #>
    public <#= field.Value #> <#= field.Key #> { get; set; }
        <# } #>  
    }
}
<#+
    private string AddPrefixToNamespace(string namespaceName){
        if(!string.IsNullOrEmpty(NamespacePrefix)){
            return string.Format("{0}.{1}", NamespacePrefix,namespaceName);
        }
        return namespaceName;
    }
 #>