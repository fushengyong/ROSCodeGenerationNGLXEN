﻿<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ parameter type="System.String" name="Namespace" #>
<#@ parameter type="System.String" name="Type" #>
<#
    if(null == Namespace){
        throw new ArgumentNullException(nameof(Namespace));
    }

    if(string.Empty == Namespace){
        throw new ArgumentException("The argument cannot be empty!", nameof(Namespace));
    }

    if(null == Type){
        throw new ArgumentNullException(nameof(Type));
    }

    if(string.Empty == Type){
        throw new ArgumentException("The argument cannot be empty!", nameof(Type));
    }
#>
namespace <#= Namespace #>{
    public struct <#= Type #>{
        public uint sec { get; set; }
        public uint nsec { get; set; }

        public bool Equals(<#= Type #> other){
            return (sec == other.sec && nsec == other.nsec);
        }    
    }
}