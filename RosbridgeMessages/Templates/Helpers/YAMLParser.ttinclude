<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#@ include file="$(ProjectDir)\Templates\BaseClasses\MessageField.ttinclude" once="true" #>

<#+
    public static class YAMLParser{
        private const string NamespaceRegexGroupName = "namespace";
        private const string TypeRegexGroupName = "type";
        private const string IsArrayRegexGroupName = "isArray";
        private const string ElementCountRegexGroupName = "elementCount";
        private const string VariableNameRegexGroupName = "name";
        private const string ConstantValueRegexGroupName = "value";

        private const string YAMLParserRegexString = @"^\s*(?:(?<namespace>\w+)\/)?(?<type>\w+)\b(?<isArray>\[(?<elementCount>\d*)\])?\s+(?<name>\w+)(?:\s*=\s*(?<value>\w+))?";
        private static Regex YAMLParserRegex = new Regex(YAMLParserRegexString, RegexOptions.IgnoreCase | RegexOptions.Multiline | RegexOptions.Compiled);

        public static HashSet<MessageField> YAMLStringToMessageFieldSet(string yamlString){
            if(yamlString == null){
                throw new ArgumentNullException();
            }

            HashSet<MessageField> result = new HashSet<MessageField>();
            foreach(Match currentMatch in YAMLParserRegex.Matches(yamlString)){
                if(currentMatch.Success)
                {
                    string namespaceName = currentMatch.Groups[NamespaceRegexGroupName].Value;
                    string type = currentMatch.Groups[TypeRegexGroupName].Value;
                    bool isArray = currentMatch.Groups[IsArrayRegexGroupName].Success;
                    int elementCount = 0;
                    bool hasCount = int.TryParse(currentMatch.Groups[ElementCountRegexGroupName].Value, out elementCount);
                    string name = currentMatch.Groups[VariableNameRegexGroupName].Value;
                    string memberValue = currentMatch.Groups[ConstantValueRegexGroupName].Value;

                    MessageField newMember = new MessageField(name, type, namespaceName, isArray, elementCount, memberValue);
                    result.Add(newMember);
                }
            }
            return result;
        }
    }
#>
