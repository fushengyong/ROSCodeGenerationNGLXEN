<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
    public abstract class RosFile
    {
        public const string MsgFileExtension = ".msg";
        public const string SrvFileExtension = ".srv";
        private string[] _rosPackageFolderNameList = { "msg", "srv", "msgs", "srvs" };
        private const char CommentLineStartingChar = '#';

        public FileInfo RosFileInfo {get; private set; }
        public DirectoryInfo PackageDirectoryInfo { get; private set; }
        public IEnumerable<string> FileContentLineList { get; private set; }
        public string Namespace { get; private set; }
        public string ClassName { get; private set; }
        public bool HasHeader { get; private set; }
        public bool IsMeta { get; private set; }
        public string Type { get; private set; }

        public RosFile(FileInfo file){
            this.RosFileInfo = file;
            SetPackageDirectoryInfo();
            SetFileContentLineListWithoutComments();
            this.Namespace = this.PackageDirectoryInfo.Name;
            this.ClassName = Path.GetFileNameWithoutExtension(this.RosFileInfo.Name);
            SetType();
            ProcessFields();
        }

        protected abstract void ProcessFields();

        private void SetPackageDirectoryInfo(){
            if(_rosPackageFolderNameList.Contains(this.RosFileInfo.Directory.Name)){
                this.PackageDirectoryInfo = this.RosFileInfo.Directory.Parent;
            }
            else
            {                       
                this.PackageDirectoryInfo = this.RosFileInfo.Directory;
            }
        }

        private void SetFileContentLineListWithoutComments()
        {
            this.FileContentLineList = File.ReadAllLines(this.RosFileInfo.FullName).Where(line => !string.IsNullOrWhiteSpace(line) && line[0] != CommentLineStartingChar).ToList();
        }

        private void SetType(){
            Type = string.Format("{0}__{1}", Namespace, ClassName);
        }

        public override bool Equals(object obj)
        {
            if (obj != null && obj is RosFile){

                RosFile item = obj as RosFile;

                if (item == null)
                {
                    return false;
                }

                return this.Type == item.Type;
            }
            return false;
        }
    }

    public class MsgFile : RosFile
    {
        public enum ServiceMessageTypeEnum { Not = 0, Request = 1, Response = 2 }

        public ServiceMessageTypeEnum ServiceMessageType { get; private set; }
        public IDictionary<string, string> MessageFields { get; private set; }

        public MsgFile(FileInfo file) : base(file){
        }

        protected override void ProcessFields(){
            IDictionary<string, string> result = new Dictionary<string, string>();
            foreach(string line in this.FileContentLineList)
            {
                string[] splittedLine = line.Split(new char[0], StringSplitOptions.RemoveEmptyEntries);
                result.Add(splittedLine[1], splittedLine[0]);
            }  
            this.MessageFields = result;
        }

    }

    public class SrvFile : RosFile
    {
        public MsgFile Response { get; private set; }
        public MsgFile Request { get; private set; }

        public SrvFile(FileInfo file) : base(file){
        }

        protected override void ProcessFields(){
        }
    }
#>