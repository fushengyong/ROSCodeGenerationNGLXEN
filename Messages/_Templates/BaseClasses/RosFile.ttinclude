<#@ assembly name="System.Core" #>

<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ include file="$(ProjectDir)\_Templates\Helpers\YAMLParser.ttinclude" once="true"#>
<#@ include file="Member.ttinclude" once="true" #>

<#+
    public enum ServiceMessageTypeEnum { Not = 0, Request = 1, Response = 2 }

    public abstract class RosFile
    {
        private readonly string[] RosPackageFolderNameArray = { "msg", "srv", "msgs", "srvs" };
        protected const string TYPE_SEPARATOR = "__";

        public FileInfo RosFileInfo {get; private set; }
        public DirectoryInfo PackageDirectoryInfo { get; private set; }
        public string FileContent {get; private set; }
        public string Namespace { get; private set; }
        public string ClassName { get; private set; }
        public string Type { get; private set; }

        public RosFile(FileInfo file){
            if(file == null){
                throw new ArgumentNullException();
            }

            if(!file.Exists){
                throw new FileNotFoundException();
            }

            this.RosFileInfo = file;
            this.FileContent = File.ReadAllText(this.RosFileInfo.FullName);
            SetPackageDirectoryInfo();
            this.Namespace = this.PackageDirectoryInfo.Name;
            this.ClassName = Path.GetFileNameWithoutExtension(this.RosFileInfo.Name);
            SetType();
            ProcessFields();
        }

        public RosFile(string fileContent, string className, string namespaceValue){
            if(fileContent == null || className == null || namespaceValue == null){
                throw new ArgumentNullException();
            }

            this.FileContent = fileContent;
            this.ClassName  = className;
            this.Namespace = namespaceValue;
            SetType();
            ProcessFields();
        }

        protected abstract void ProcessFields();

        private void SetPackageDirectoryInfo(){
            if(RosPackageFolderNameArray.Contains(this.RosFileInfo.Directory.Name)){
                this.PackageDirectoryInfo = this.RosFileInfo.Directory.Parent;
            }
            else
            {                       
                this.PackageDirectoryInfo = this.RosFileInfo.Directory;
            }
        }

        private void SetType(){
            Type = string.Format("{0}{1}{2}", Namespace, TYPE_SEPARATOR, ClassName);
        }

        public override bool Equals(object obj)
        {
            if (obj != null && obj is RosFile){

                RosFile item = obj as RosFile;

                if (item == null)
                {
                    return false;
                }

                return this.Type == item.Type;
            }
            return false;
        }
    }

    public class MsgFile : RosFile
    {
        private const string HEADER_TYPE_NAME = "Header";
        public const string FILE_EXTENSION = "msg";
        public static readonly Dictionary<string,string> PrimitiveTypeDictionary = new Dictionary<string,string>
        {
            {"float64", "double"},
            {"float32", "Single"},
            {"uint64", "ulong"},
            {"uint32", "uint"},
            {"uint16", "ushort"},
            {"uint8", "byte"},
            {"int64", "long"},
            {"int32", "int"},
            {"int16", "short"},
            {"int8", "sbyte"},
            {"byte", "byte"},
            {"bool", "bool"},
            {"char", "char"},
            {"time", "Time"},
            {"string", "string"},
            {"duration", "Duration"}     
        };
        public static readonly HashSet<string> MessageTypeSet = new HashSet<string>();

        public bool HasHeader { get; private set; }
        public bool IsMeta { get; private set; }
        public ServiceMessageTypeEnum ServiceMessageType { get; private set; }
        public HashSet<Member> MemberSet { get; private set; }

        public MsgFile(FileInfo file) : base(file){
        }

        public MsgFile(string fileContent, string className, string namespaceValue, ServiceMessageTypeEnum type) : base(fileContent, className, namespaceValue){
            this.ServiceMessageType = type;
        }

        protected override void ProcessFields(){
            this.MemberSet = YAMLParser.YAMLStringToMemberSet(this.FileContent);
                
            foreach(Member currentMember in this.MemberSet)
            {
                string cSharpType = string.Empty;
                if(PrimitiveTypeDictionary.TryGetValue(currentMember.Type, out cSharpType)){
                    currentMember.CSharpType = cSharpType;     
                }
                else
                {
                    IsMeta = true;
                    if(currentMember.Type == HEADER_TYPE_NAME){
                        HasHeader = true;
                    }
                }
            }

            MessageTypeSet.Add(this.Type);
        }
    }

    public class SrvFile : RosFile
    {
        private const string INPUT_OUTPUT_SEPARATOR = "---";
        private const string REQUEST_NAME = "Request";
        private const string RESPONSE_NAME = "Response";

        public const string FILE_EXTENSION = "srv";

        public MsgFile Response { get; private set; }
        public MsgFile Request { get; private set; }

        public SrvFile(FileInfo file) : base(file){
        }

        protected override void ProcessFields(){
            string[] splittedFileContent = this.FileContent.Split(new string[] { INPUT_OUTPUT_SEPARATOR }, StringSplitOptions.None);

            string requestString = splittedFileContent.FirstOrDefault();
            string responseString = splittedFileContent.LastOrDefault();

            if(requestString != null){
                string tempClassName = string.Format("{0}{1}{2}",this.ClassName, TYPE_SEPARATOR, RESPONSE_NAME);
                Request = new MsgFile(requestString, tempClassName, this.Namespace, ServiceMessageTypeEnum.Request);
            }

            if(responseString != null){
                string tempClassName = string.Format("{0}{1}{2}",this.ClassName, TYPE_SEPARATOR, REQUEST_NAME);
                Response = new MsgFile(responseString, tempClassName, this.Namespace, ServiceMessageTypeEnum.Response);
            }
        }
    }
#>